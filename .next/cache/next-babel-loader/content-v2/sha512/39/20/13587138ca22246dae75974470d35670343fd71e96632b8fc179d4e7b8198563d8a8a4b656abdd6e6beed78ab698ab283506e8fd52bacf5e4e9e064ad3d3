{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/cody/MarkTraining/mark-magic-sample/pages/callback.js\";\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport Loading from '../components/loading';\nimport { magic } from '../magic';\nexport default function Callback() {\n  useEffect(() => {\n    // On mount, we try to login with a Magic credential in the URL query.\n    magic.auth.loginWithCredential().then(async didToken => {\n      // Validate auth token with server\n      const res = await fetch('/api/login', {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken\n        }\n      });\n      res.status === 200 && Router.push('/');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 10\n  }, this);\n}","map":{"version":3,"sources":["/Users/cody/MarkTraining/mark-magic-sample/pages/callback.js"],"names":["useEffect","Router","Loading","magic","Callback","auth","loginWithCredential","then","didToken","res","fetch","headers","Authorization","status","push"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,KAAT,QAAsB,UAAtB;AAEA,eAAe,SAASC,QAAT,GAAoB;AACjCJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACAG,IAAAA,KAAK,CAACE,IAAN,CAAWC,mBAAX,GAAiCC,IAAjC,CAAsC,MAAOC,QAAP,IAAoB;AACxD;AACA,YAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,YAAD,EAAe;AACpCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,aAAa,EAAE,YAAYJ;AAFpB;AAD2B,OAAf,CAAvB;AAMAC,MAAAA,GAAG,CAACI,MAAJ,KAAe,GAAf,IAAsBZ,MAAM,CAACa,IAAP,CAAY,GAAZ,CAAtB;AACD,KATD;AAUD,GAZQ,EAYN,EAZM,CAAT;AAcA,sBAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD","sourcesContent":["import { useEffect } from 'react';\nimport Router from 'next/router';\nimport Loading from '../components/loading';\nimport { magic } from '../magic';\n\nexport default function Callback() {\n  useEffect(() => {\n    // On mount, we try to login with a Magic credential in the URL query.\n    magic.auth.loginWithCredential().then(async (didToken) => {\n      // Validate auth token with server\n      const res = await fetch('/api/login', {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken,\n        },\n      });\n      res.status === 200 && Router.push('/');\n    });\n  }, []);\n\n  return <Loading />;\n}\n"]},"metadata":{},"sourceType":"module"}