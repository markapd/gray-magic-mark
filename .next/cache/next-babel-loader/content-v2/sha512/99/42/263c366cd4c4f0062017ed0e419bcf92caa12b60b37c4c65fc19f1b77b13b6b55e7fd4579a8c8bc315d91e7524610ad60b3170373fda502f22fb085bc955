{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/cody/MarkTraining/mark-magic-sample/pages/login.js\";\nimport { useCallback, useState } from 'react';\nimport Router from 'next/router';\nimport { Magic } from 'magic-sdk';\nimport { magic } from '../magic';\nexport default function Login() {\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: isLoggingIn,\n    1: setIsLoggingIn\n  } = useState(false);\n  const {\n    0: sms,\n    1: setSms\n  } = useState('');\n  console.log(sms);\n  /**\n   * Perform login action via Magic's passwordless flow. Upon successuful\n   * completion of the login flow, a user is redirected to the homepage.\n   * \n   \n   */\n\n  async function loginWithSMSNumber() {\n    const m = new Magic('pk_live_BA27AD13D51DA6FB');\n    console.log(smsNumber);\n\n    try {\n      await m.auth.loginWithSMS({\n        phoneNumber: smsNumber\n      });\n    } catch (err) {\n      if (err instanceof RPCError) {\n        switch (err.code) {\n          case RPCErrorCode.MagicLinkFailedVerification:\n            console.log(err);\n\n          case RPCErrorCode.MagicLinkExpired:\n            console.log(err);\n\n          case RPCErrorCode.MagicLinkRateLimited:\n            console.log(err);\n\n          case RPCErrorCode.MagicLinkInvalidRedirectURL:\n            console.log(err);\n\n          case RPCErrorCode.UserAlreadyLoggedIn:\n            console.log(err);\n            break;\n        }\n      }\n    }\n  }\n\n  const login = useCallback(async () => {\n    setIsLoggingIn(true);\n\n    try {\n      const didToken = await magic.auth.loginWithMagicLink({\n        email,\n        redirectURI: new URL('/callback', window.location.origin).href\n      });\n      const res = await fetch('/api/login', {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken\n        }\n      });\n      res.status === 200 && Router.push('/');\n    } catch {\n      setIsLoggingIn(false);\n    }\n  }, [email]);\n  /**\n   * Saves the value of our email input into component state.\n   */\n\n  const handleInputOnChange = useCallback(event => {\n    setEmail(event.target.value);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please sign up or login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      name: \"email\",\n      required: \"required\",\n      placeholder: \"Enter your email\",\n      onChange: handleInputOnChange,\n      disabled: isLoggingIn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: login,\n      disabled: isLoggingIn,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: e => setSms(e.target.value),\n      name: \"phone\",\n      type: \"tel\",\n      name: \"phone\",\n      required: \"required\",\n      placeholder: \"Enter your phone #\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loginWithSMSNumber,\n      type: \"submit\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/Users/cody/MarkTraining/mark-magic-sample/pages/login.js"],"names":["useCallback","useState","Router","Magic","magic","Login","email","setEmail","isLoggingIn","setIsLoggingIn","sms","setSms","console","log","loginWithSMSNumber","m","smsNumber","auth","loginWithSMS","phoneNumber","err","RPCError","code","RPCErrorCode","MagicLinkFailedVerification","MagicLinkExpired","MagicLinkRateLimited","MagicLinkInvalidRedirectURL","UserAlreadyLoggedIn","login","didToken","loginWithMagicLink","redirectURI","URL","window","location","origin","href","res","fetch","headers","Authorization","status","push","handleInputOnChange","event","target","value","e"],"mappings":"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","sourcesContent":["import { useCallback, useState } from 'react';\nimport Router from 'next/router';\nimport { Magic } from 'magic-sdk';\nimport { magic } from '../magic';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [isLoggingIn, setIsLoggingIn] = useState(false);\n  const [sms, setSms] = useState('')\nconsole.log(sms)\n  /**\n   * Perform login action via Magic's passwordless flow. Upon successuful\n   * completion of the login flow, a user is redirected to the homepage.\n   * \n   \n   */\n\n   async function loginWithSMSNumber() {\n    const m = new Magic('pk_live_BA27AD13D51DA6FB')\n    console.log(smsNumber)\n    try {\n      await m.auth.loginWithSMS({ phoneNumber: smsNumber })\n    } catch (err) {\n      if (err instanceof RPCError) {\n        switch (err.code) {\n          case RPCErrorCode.MagicLinkFailedVerification:\n            console.log(err)\n          case RPCErrorCode.MagicLinkExpired:\n            console.log(err)\n          case RPCErrorCode.MagicLinkRateLimited:\n            console.log(err)\n          case RPCErrorCode.MagicLinkInvalidRedirectURL:\n            console.log(err)\n          case RPCErrorCode.UserAlreadyLoggedIn:\n            console.log(err)\n            break\n        }\n      }\n    }\n  }\n\n  const login = useCallback(async () => {\n    setIsLoggingIn(true);\n\n    try {\n      const didToken = await magic.auth.loginWithMagicLink({\n        email,\n        redirectURI: new URL('/callback', window.location.origin).href,\n      });\n\n      const res = await fetch('/api/login', {\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: 'Bearer ' + didToken,\n        },\n      });\n      res.status === 200 && Router.push('/');\n    } catch {\n      setIsLoggingIn(false);\n    }\n  }, [email]);\n\n  /**\n   * Saves the value of our email input into component state.\n   */\n  const handleInputOnChange = useCallback((event) => {\n    setEmail(event.target.value);\n  }, []);\n\n  return (\n    <div className='container'>\n      <h1>Please sign up or login</h1>\n      <input\n        type='email'\n        name='email'\n        required='required'\n        placeholder='Enter your email'\n        onChange={handleInputOnChange}\n        disabled={isLoggingIn}\n      />\n      <button onClick={login} disabled={isLoggingIn}>\n        Send\n      </button>\n      \n      <input onChange={(e) => setSms(e.target.value)} name=\"phone\" type=\"tel\" name=\"phone\" required=\"required\" placeholder=\"Enter your phone #\" />\n      <button onClick={loginWithSMSNumber} type=\"submit\">Send</button>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}